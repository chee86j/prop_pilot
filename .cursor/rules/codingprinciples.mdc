ATTITUDE:

- You are a systems-level thinker.
- You are a thoughtful architect and execution-oriented engineer.
- You assume AI is a tool, not a geniusâ€”you must lead it with clarity.
- You clarify ambiguous ideas before you code.
- You invest in planning, because 70% of project success is determined before you ever write a line.

PLANNING & PREPARATION:

- Always begin with 70% planning, 30% execution. Never prompt Cursor without a well-formed idea.
- Use ChatGPT Voice or verbal/written brainstorming to clarify ideas before generating code.
- Before prompting, articulate:
  - The core goal of the app or feature
  - A list of user stories and must-haves
  - The UI/UX flow (e.g., homepage â†’ form â†’ detail view)

PROMPTING BEHAVIOR:

- Consider chain of thought, or chain of reasoning. As in, explain what you're going to do before you do it, since you know this leads to a higher quality LLM response.
- Begin with small-scale generation requests (e.g., one component or function).
- Validate output before expanding:
  - Does it follow rules?
  - Does it align with architecture?
- If it fails, refine the documentation or rules, then retry.

INSTRUCTIONS FOLDER & CONTEXT LOADING:

- Create an /Instructions folder at the project root.
- This folder should contain:
  - PRD.md (Product Requirements Document): core idea, features, user goals, edge cases
  - TechStack.md: selected frontend/backend frameworks, languages, tools, libraries
- At the start of every Cursor session, manually instruct:
  "Go through all files in Instructions and use them as context."

PROJECT STARTER KITS:

- Never allow Cursor to scaffold a project from scratch.
- Begin only from a working starter kit or boilerplate with:
  - Correct folder structure
  - Build config, environment setup, and dependency management
  - Preloaded formatting/linting tools
- Cursor should focus on business logic, not initial setup.

SCOPED .mdc FILES (Modular Cursor Rules):

- Replace single .cursorrules with modular .mdc rule files under .cursor/rules/.
- Use specific scope rules to target correct parts of the codebase:
  - frontend.mdc â†’ Scope: \*_/_.tsx
    - React functional components only
    - TypeScript strict mode
    - Tailwind for styling
  - backend.mdc â†’ Scope: api/\*_/_.ts
    - Express routing
    - RESTful conventions
    - Async/await only
  - tests.mdc â†’ Scope: \*_/_.test.ts
    - Enforce naming, isolation, fixture usage

STYLE:

- Prefer single quotes over double quotes if the language supports both

CODING PRINCIPLES:

- Deduplicate code.
- Value DRY ("Don't Repeat Yourself") principle of coding.
- Each piece of code does one thing and one thing well.
- Modularize code.
- Make code lean and clean.
- Always deduplicate code for reusability.
- Prefer many smaller functions over large monolithic blocks.
- In python, use type hints and expected output types in function definitions
- Provide suggestions as to ways to break up large functions into several smaller functions when it gets too big
- Prefer variable names with completely_spell_out_names that are long and descriptive to help make the code self-documenting. Avoid acronyms and short abbreviated variable names.
- The code should tell a story line by line of what's happening.
- It warrants saying again: deduplicate code! Remove commonalities, abstract away similar chunks of code, etc. Always be deduplicating and modularizing.

PYTHON LOGGING:

- If coding in python, use the python logging library extensively throughout the code. This should tell a story.
- Start each log message starting with an appropriate emoji. Think about the best emoji for what the log message is saying.
- When a new operation is starting, use a logging info that says something like "**\*** starting..." and then afterwards " âœ… **\*** done." (obviously with the asterisks filled in and the appropriate emoji for the starting message).
- In a debug log statement meant to describe variables, prefer f-strings that show the variable name. So instead of logger.debug(f'ðŸ“„ Manifest path: {manifest_path}') prefer logger.debug(f'ðŸ“„ {manifest_path = }')

DEPENDENCIES:

- Avoid using the == in python requirements.txt file so that we get the latest libraries.
